Day = gsub("Juillet", "July", Day),
Day = gsub("Aout", "August", Day),
Day = gsub("Septembre", "September", Day),
Day = gsub("Octobre", "October", Day),
Day = gsub("Novembre", "November", Day),
Day = gsub("Décembre", "December", Day))
View(cleaned_data)
# What I Want to do is to convert the two columns day and hour in the timestamp format
# First I separate the day of the week from gg/month
cleaned_data = raw_data %>%
separate(day, c("Week day", "Day"), sep = " ", extra = "merge") %>%
mutate(year = 2024)
cleaned_data = cleaned_data %>%
mutate(timestamp = dmy_hm(paste(Day, year, hour,  sep = " ")))
cleaned_data = cleaned_data %>% separate(waves_size, c("min_wave_size", "max_wave_size"), sep = " - ")
cleaned_data = cleaned_data %>%
separate(wind_direction, c("w","d", "wind_direction"), sep=" ") %>%
select(-w, -d) %>%
mutate(day = as_date(timestamp))
cleaned_data
surf_data = cleaned_data %>% select(`Week day`, day, timestamp, wind_speed, wind_direction, min_wave_size, max_wave_size,temperature) %>%
mutate(min_wave_size = as.numeric(min_wave_size), max_wave_size = as.numeric(max_wave_size), avg_wave_size = (min_wave_size+max_wave_size)/2) %>% arrange(timestamp)
surf_data
View(surf_data)
View(cleaned_data)
View(raw_data)
View(raw_data)
library(flexdashboard)
library(tidyverse)
library(plotly)
library(lubridate)
library(DT)
# Data cleaning part
raw_data = read.csv("surf_data.csv")
# Translation of days and months names from French to English
weekdays_translation_fr <- c("Lundi" = "Monday", "Mardi" = "Tuesday",
"Mercredi" = "Wednesday", "Jeudi" = "Thursday",
"Vendredi" = "Friday", "Samedi" = "Saturday",
"Dimanche" = "Sunday")
cleaned_data = raw_data %>%
separate(day, c("Week day", "Day"), sep = " ", extra = "merge") %>%
mutate(year = 2024)
cleaned_data <- cleaned_data %>%
mutate(`Week day` = recode(`Week day`, !!!weekdays_translation_fr))
cleaned_data <- cleaned_data %>%
mutate(Day = gsub("Janvier", "January", Day),
Day = gsub("Février", "February", Day),
Day = gsub("Mars", "March", Day),
Day = gsub("Avril", "April", Day),
Day = gsub("Mai", "May", Day),
Day = gsub("Juin", "June", Day),
Day = gsub("Juillet", "July", Day),
Day = gsub("Aout", "August", Day),
Day = gsub("Septembre", "September", Day),
Day = gsub("Octobre", "October", Day),
Day = gsub("Novembre", "November", Day),
Day = gsub("Décembre", "December", Day))
View(cleaned_data)
View(cleaned_data)
View(cleaned_data)
View(raw_data)
library(flexdashboard)
library(tidyverse)
library(plotly)
library(lubridate)
library(DT)
# Data cleaning part
raw_data = read.csv("surf_data.csv")
# Translation of days and months names from French to English
weekdays_translation_fr <- c("Lundi" = "Monday", "Mardi" = "Tuesday",
"Mercredi" = "Wednesday", "Jeudi" = "Thursday",
"Vendredi" = "Friday", "Samedi" = "Saturday",
"Dimanche" = "Sunday")
translated_data = raw_data %>%
separate(day, c("Week day", "Day"), sep = " ", extra = "merge") %>%
mutate(year = 2024)
translated_data <- cleaned_data %>%
mutate(`Week day` = recode(`Week day`, !!!weekdays_translation_fr))
# Data cleaning part
raw_data = read.csv("surf_data.csv")
# Translation of days and months names from French to English
weekdays_translation_fr <- c("Lundi" = "Monday", "Mardi" = "Tuesday",
"Mercredi" = "Wednesday", "Jeudi" = "Thursday",
"Vendredi" = "Friday", "Samedi" = "Saturday",
"Dimanche" = "Sunday")
translated_data = raw_data %>%
separate(day, c("Week day", "Day"), sep = " ", extra = "merge") %>%
mutate(year = 2024)
translated_data <- translated_data %>%
mutate(`Week day` = recode(`Week day`, !!!weekdays_translation_fr))
translated_data <- cleaned_data %>%
mutate(Day = gsub("Janvier", "January", Day),
Day = gsub("Février", "February", Day),
Day = gsub("Mars", "March", Day),
Day = gsub("Avril", "April", Day),
Day = gsub("Mai", "May", Day),
Day = gsub("Juin", "June", Day),
Day = gsub("Juillet", "July", Day),
Day = gsub("Aout", "August", Day),
Day = gsub("Septembre", "September", Day),
Day = gsub("Octobre", "October", Day),
Day = gsub("Novembre", "November", Day),
Day = gsub("Décembre", "December", Day))
library(flexdashboard)
library(tidyverse)
library(plotly)
library(lubridate)
library(DT)
# Data cleaning part
raw_data = read.csv("surf_data.csv")
# Translation of days and months names from French to English
weekdays_translation_fr <- c("Lundi" = "Monday", "Mardi" = "Tuesday",
"Mercredi" = "Wednesday", "Jeudi" = "Thursday",
"Vendredi" = "Friday", "Samedi" = "Saturday",
"Dimanche" = "Sunday")
translated_data = raw_data %>%
separate(day, c("Week day", "Day"), sep = " ", extra = "merge") %>%
mutate(year = 2024)
translated_data <- translated_data %>%
mutate(`Week day` = recode(`Week day`, !!!weekdays_translation_fr))
translated_data <- translated_data %>%
mutate(Day = gsub("Janvier", "January", Day),
Day = gsub("Février", "February", Day),
Day = gsub("Mars", "March", Day),
Day = gsub("Avril", "April", Day),
Day = gsub("Mai", "May", Day),
Day = gsub("Juin", "June", Day),
Day = gsub("Juillet", "July", Day),
Day = gsub("Aout", "August", Day),
Day = gsub("Septembre", "September", Day),
Day = gsub("Octobre", "October", Day),
Day = gsub("Novembre", "November", Day),
Day = gsub("Décembre", "December", Day))
# What I Want to do is to convert the two columns day and hour in the timestamp format
# First I separate the day of the week from gg/month
cleaned_data = translated_data %>%
separate(day, c("Week day", "Day"), sep = " ", extra = "merge") %>%
mutate(year = 2024)
View(translated_data)
View(raw_data)
# What I Want to do is to convert the two columns day and hour in the timestamp format
# First I separate the day of the week from gg/month
cleaned_data = translated_data %>%
separate(Day, c("Week day", "Day"), sep = " ", extra = "merge") %>%
mutate(year = 2024)
cleaned_data = cleaned_data %>%
mutate(timestamp = dmy_hm(paste(Day, year, hour,  sep = " ")))
cleaned_data = cleaned_data %>% separate(waves_size, c("min_wave_size", "max_wave_size"), sep = " - ")
cleaned_data = cleaned_data %>%
separate(wind_direction, c("w","d", "wind_direction"), sep=" ") %>%
select(-w, -d) %>%
mutate(day = as_date(timestamp))
cleaned_data
surf_data = cleaned_data %>% select(`Week day`, day, timestamp, wind_speed, wind_direction, min_wave_size, max_wave_size,temperature) %>%
mutate(min_wave_size = as.numeric(min_wave_size), max_wave_size = as.numeric(max_wave_size), avg_wave_size = (min_wave_size+max_wave_size)/2) %>% arrange(timestamp)
surf_data
View(surf_data)
View(surf_data)
library(flexdashboard)
library(tidyverse)
library(plotly)
library(lubridate)
library(DT)
# Data cleaning part
raw_data = read.csv("surf_data.csv")
# Translation of days and months names from French to English
weekdays_translation_fr <- c("Lundi" = "Monday", "Mardi" = "Tuesday",
"Mercredi" = "Wednesday", "Jeudi" = "Thursday",
"Vendredi" = "Friday", "Samedi" = "Saturday",
"Dimanche" = "Sunday")
translated_data = raw_data %>%
separate(day, c("Week day", "Day"), sep = " ", extra = "merge") %>%
mutate(year = 2024)
translated_data <- translated_data %>%
mutate(`Week day` = recode(`Week day`, !!!weekdays_translation_fr))
translated_data <- translated_data %>%
mutate(Day = gsub("Janvier", "January", Day),
Day = gsub("Février", "February", Day),
Day = gsub("Mars", "March", Day),
Day = gsub("Avril", "April", Day),
Day = gsub("Mai", "May", Day),
Day = gsub("Juin", "June", Day),
Day = gsub("Juillet", "July", Day),
Day = gsub("Aout", "August", Day),
Day = gsub("Septembre", "September", Day),
Day = gsub("Octobre", "October", Day),
Day = gsub("Novembre", "November", Day),
Day = gsub("Décembre", "December", Day))
# What I Want to do is to convert the two columns day and hour in the timestamp format
# First I separate the day of the week from gg/month
cleaned_data = translated_data %>%
mutate(timestamp = dmy_hm(paste(Day, year, hour,  sep = " ")))
cleaned_data = cleaned_data %>% separate(waves_size, c("min_wave_size", "max_wave_size"), sep = " - ")
cleaned_data = cleaned_data %>%
separate(wind_direction, c("w","d", "wind_direction"), sep=" ") %>%
select(-w, -d) %>%
mutate(day = as_date(timestamp))
cleaned_data
surf_data = cleaned_data %>% select(`Week day`, day, timestamp, wind_speed, wind_direction, min_wave_size, max_wave_size,temperature) %>%
mutate(min_wave_size = as.numeric(min_wave_size), max_wave_size = as.numeric(max_wave_size), avg_wave_size = (min_wave_size+max_wave_size)/2) %>% arrange(timestamp)
surf_data
View(surf_data)
# Computing the best day part
score_wave <- function(avg_wave){
score <- 3.6*avg_wave
if (score > 10){
return(10)
} else{
return(score)
}
}
score_wind <- function(avg_wind){
score <- 2*avg_wind/10
if (score > 10){
return(10)
} else{
return(score)
}
}
best_day_data <- surf_data %>%
group_by(`Week day`, day) %>%
summarize(highest_wave = max(max_wave_size),
min_wave = round(min(min_wave_size),2),
avg_wave = round(mean(avg_wave_size),2),
max_wind = round(max(wind_speed),2),
avg_wind = round(mean(wind_speed),2),
min_wind = round(min(wind_speed),2),
wave_score = round(score_wave(avg_wave),2),
wind_score = round(score_wind(avg_wind),2),
score = round(wave_score*0.8 - wind_score*0.2,1)) %>%
arrange(desc(score))
best_day <- best_day_data[1, ]
best_day
View(surf_data)
data <- surf_data %>%
filter(`Week day`== best_day$`Week day`)
best_moment <- data %>%
group_by(timestamp,`Week day`) %>%
summarize(highest_wave_detail = max(max_wave_size),
min_wave_detail = round(min(min_wave_size),2),
avg_wave_detail = round(mean(avg_wave_size),2),
max_wind_detail = round(max(wind_speed),2),
avg_wind_detail = round(mean(wind_speed),2),
min_wind_detail = round(min(wind_speed),2),
wave_score_detail = round(score_wave_detail(avg_wave_detail),2),
wind_score_detail = round(score_wind_detail(avg_wind_detail),2),
score_detail = round(wave_score_detail*0.8 - wind_score_detail*0.2,1),
hour = format(timestamp, "%H:%M")) %>%
arrange(desc(score_detail))
# Computing the best hour part
score_wave_detail <- function(avg_wave_detail){
score <- 3.6*avg_wave_detail
if (score > 10){
return(10)
} else{
return(score)
}
}
score_wind_detail <- function(avg_wind_detail){
score <- 2*avg_wind_detail/10
if (score > 10){
return(10)
} else{
return(score)
}
}
data <- surf_data %>%
filter(`Week day`== best_day$`Week day`)
best_moment <- data %>%
group_by(timestamp,`Week day`) %>%
summarize(highest_wave_detail = max(max_wave_size),
min_wave_detail = round(min(min_wave_size),2),
avg_wave_detail = round(mean(avg_wave_size),2),
max_wind_detail = round(max(wind_speed),2),
avg_wind_detail = round(mean(wind_speed),2),
min_wind_detail = round(min(wind_speed),2),
wave_score_detail = round(score_wave_detail(avg_wave_detail),2),
wind_score_detail = round(score_wind_detail(avg_wind_detail),2),
score_detail = round(wave_score_detail*0.8 - wind_score_detail*0.2,1),
hour = format(timestamp, "%H:%M")) %>%
arrange(desc(score_detail))
best_hour <- best_moment[1,]
best_hour
View(data)
View(best_moment)
data <- surf_data %>%
filter(`Week day`== best_day$`Week day`)
best_moment <- data %>%
group_by(timestamp,`Week day`) %>%
summarize(highest_wave_detail = max(max_wave_size),
min_wave_detail = round(min(min_wave_size),2),
avg_wave_detail = round(mean(avg_wave_size),2),
max_wind_detail = round(max(wind_speed),2),
avg_wind_detail = round(mean(wind_speed),2),
min_wind_detail = round(min(wind_speed),2),
wave_score_detail = round(score_wave_detail(avg_wave_detail),2),
wind_score_detail = round(score_wind_detail(avg_wind_detail),2),
score_detail = round(wave_score_detail*0.8 - wind_score_detail*0.2,1),
hour = format(timestamp, "%H:%M"),
temperature = temperature)) %>%
data <- surf_data %>%
filter(`Week day`== best_day$`Week day`)
best_moment <- data %>%
group_by(timestamp,`Week day`) %>%
summarize(highest_wave_detail = max(max_wave_size),
min_wave_detail = round(min(min_wave_size),2),
avg_wave_detail = round(mean(avg_wave_size),2),
max_wind_detail = round(max(wind_speed),2),
avg_wind_detail = round(mean(wind_speed),2),
min_wind_detail = round(min(wind_speed),2),
wave_score_detail = round(score_wave_detail(avg_wave_detail),2),
wind_score_detail = round(score_wind_detail(avg_wind_detail),2),
score_detail = round(wave_score_detail*0.8 - wind_score_detail*0.2,1),
hour = format(timestamp, "%H:%M"),
temperature = temperature) %>%
arrange(desc(score_detail))
best_hour <- best_moment[1,]
best_hour
hour_temperature = best_moment %>% mutate(hour = as_date(timestamp)) %>% group_by(hour) %>% summarize(temperature = temperature)
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=hour, y = temperature), col="purple") +
scale_x_date(date_breaks = "1 day", date_labels = "%d %B") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
View(hour_temperature)
hour_temperature = best_moment %>% group_by(hour) %>% summarize(temperature = temperature)
hour_temperature
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=hour, y = temperature), col="purple") +
scale_x_date(date_breaks = "1 day", date_labels = "%d %B") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
hour_temperature = best_moment %>% group_by(hour) %>% summarize(temperature = temperature)
hour_temperature
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=hour, y = temperature), col="purple") +
scale_x_date(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
hour_temperature = best_moment %>% mutate(hour = as_time(timestamp)) %>% group_by(hour) %>% summarize(temperature = temperature)
hour_temperature = best_moment %>% mutate(hour = as_time(timestamp)) %>% group_by(hour) %>% summarize(temperature = temperature)
as_time <- function(timestamp) {
format(as.POSIXct(timestamp), format="%H:%M")
}
hour_temperature = best_moment %>% mutate(hour = as_time(timestamp)) %>% group_by(hour) %>% summarize(temperature = temperature)
hour_temperature
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=hour, y = temperature), col="purple") +
scale_x_date(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
View(hour_temperature)
per_day_wind = surf_data %>% mutate(day = as_date(timestamp)) %>% group_by(day) %>% summarize(avg_wind_speed = mean(wind_speed))
plot_wind = ggplot(per_day_wind) +
geom_line(aes(x=day, y = avg_wind_speed), col="orange") +
scale_x_date(date_breaks = "1 day", date_labels = "%d %B") +
labs(y="Wind speed (km/h)", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_wind)
View(per_day_wind)
View(per_day_wind)
View(per_day_wind)
as_time <- function(timestamp) {
format(as.POSIXct(timestamp), format="%H:%M")
}
hour_temperature = best_moment %>% mutate(hour = as_time(timestamp)) %>% group_by(hour) %>% summarize(temperature = temperature)
hour_temperature
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=hour, y = temperature), col="purple") +
scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
as_time <- function(timestamp) {
format(as.POSIXct(timestamp), format="%H:%M")
}
hour_temperature = best_moment %>% mutate(hour = as_time(timestamp)) %>% group_by(hour) %>% summarize(temperature = temperature)
hour_temperature
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=hour, y = temperature), col="purple") +
scale_x_continuous(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
class(hour_temperature)
class(hour_temperature$hour)
hour_temperature = best_moment %>% group_by(hour) %>% summarize(temperature = temperature)
hour_temperature
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=hour, y = temperature), col="purple") +
scale_x_continuous(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(hour_temperature)
class(hour_temperature$hour)
hour_temperature = best_moment %>% mutate(hour = as.POSIXct(timestamp)) %>% group_by(hour) %>% summarize(temperature = temperature)
hour_temperature
class(hour_temperature$hour)
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=hour, y = temperature), col="purple") +
scale_x_continuous(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
hour_temperature = best_moment %>% mutate(hour = as.POSIXct(timestamp)) %>% group_by(hour) %>% summarize(temperature = temperature)
hour_temperature
class(hour_temperature$hour)
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=hour, y = temperature), col="purple") +
scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
hour_temperature = best_moment %>% mutate(time = as.POSIXct(timestamp)) %>% mutate(hour <- hour(time)) %>% group_by(hour) %>% summarize(temperature = temperature)
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=time, y = temperature), col="purple") +
scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
hour_temperature = best_moment %>% mutate(time = as.POSIXct(timestamp)) %>% group_by(time) %>% summarize(temperature = temperature, hour = hour(time))
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=time, y = temperature), col="purple") +
scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
hour_temperature = best_moment %>% mutate(time = as.POSIXct(timestamp)) %>% group_by(time) %>% summarize(temperature = temperature, hour = hour(time))
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=hour, y = temperature), col="purple") +
scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
hour_temperature = best_moment %>% mutate(hour = as.POSIXct(timestamp)) %>% group_by(hour) %>% summarize(temperature = temperature)
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=hour, y = temperature), col="purple") +
scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
hour_temperature = best_moment %>% mutate(hour = as.POSIXct(timestamp)) %>% group_by(hour) %>% summarize(temperature = temperature, hour = format(timestamp, "%H:%M"))
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=hour, y = temperature), col="purple") +
scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
hour_temperature = best_moment %>% mutate(hour = as.POSIXct(timestamp)) %>% group_by(hour) %>% summarize(temperature = temperature)
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x=(hour = format(timestamp, "%H:%M")), y = temperature), col="purple") +
scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
hour_temperature = best_moment %>% mutate(hour = as.POSIXct(timestamp)) %>% group_by(hour) %>% summarize(temperature = temperature)
plot_temp = ggplot(hour_temperature) +
geom_line(aes(x= hour, y = temperature), col="purple") +
scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") +
labs(y="Temperature", x="") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(plot_temp)
View(best_moment)
library(flexdashboard)
library(tidyverse)
library(plotly)
library(lubridate)
library(DT)
# Data cleaning part
raw_data = read.csv("surf_data.csv")
# Translation of days and months names from French to English
weekdays_translation_fr <- c("Lundi" = "Monday", "Mardi" = "Tuesday",
"Mercredi" = "Wednesday", "Jeudi" = "Thursday",
"Vendredi" = "Friday", "Samedi" = "Saturday",
"Dimanche" = "Sunday")
translated_data = raw_data %>%
separate(day, c("Week day", "Day"), sep = " ", extra = "merge") %>%
mutate(year = 2024)
translated_data <- translated_data %>%
mutate(`Week day` = recode(`Week day`, !!!weekdays_translation_fr))
translated_data <- translated_data %>%
mutate(Day = gsub("Janvier", "January", Day),
Day = gsub("Février", "February", Day),
Day = gsub("Mars", "March", Day),
Day = gsub("Avril", "April", Day),
Day = gsub("Mai", "May", Day),
Day = gsub("Juin", "June", Day),
Day = gsub("Juillet", "July", Day),
Day = gsub("Aout", "August", Day),
Day = gsub("Septembre", "September", Day),
Day = gsub("Octobre", "October", Day),
Day = gsub("Novembre", "November", Day),
Day = gsub("Décembre", "December", Day))
